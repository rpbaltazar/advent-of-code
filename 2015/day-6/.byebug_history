c
instruction.scan(/\d+/)
instruction.scan(/d+/)
instruction
q
input_name
c
q
@lights_on[x]
x
q
lights_coords[:end_y]
lights_coords[:start_y]
lights_coords[:end_x]
lights_coords[:start_x]
start_x
c
q
@lights_on
@lights
c
set[:coordinates]
c
set[:coordinates]
c
set[:coordinates]
c
set[:coordinates]
set[:instruction]
set
q
@lights_on
c
q
!@lights_on[x][y]
@lights_on[x][y]
n
@lights_on[1]
y
x
q
@lights_on
pp @lights_on
@lights_on
q
a.each {|key, val| puts val.select{|sub_k, sub_v| sub_v }.length }
a.each {|key, val| puts val.select{|sub_k, sub_v| puts sub_v }.length }
a.each {|key, val| puts val.select{|sub| puts sub }.length }
a.each {|key, val| puts val.select{|sub| sub }.length }
a.each {|key, val| puts val.select({|sub| sub }).length }
a.each do |key, val|
a = {'1' => {'1' => false, '2' => true}, '2' => {'1' =>true, '2' => true} }
a = {1: {1: false, 2: true}, 2: {1: true, 2: true} }
a = {}
@lights_on.keys
@lights_on.first
@lights_on
exit
c
str.gsub(a.join(" through "), "")
str.gsub(a.join(" through "))
a.join(" through ")
a
coordinates.join(" through ")
str
str.gsub(a[0], "")
str.gsub(a, "")
str.chomp "660"
str
a[0]
str.chomp a[0]
str.chomp a
str.chomp
str
str.slice coordinates[0]
str.slice coordinates
str.except(a)
a.except(a)
str
a = str.scan(/\d+,\d+/)
a = _
str.scan(/\d+,\d+/)
str
coordinates.length
coordinates[0]
coordinates.matches
coordinates.captures
coordinates
